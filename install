#!/usr/bin/env python

import os
import subprocess
import shutil


REQUIREMENTS = [ "pip", "git" ]

FILES_IGNORED_FOR_DELETION = [] # libraries which we don't want to re-fetch each time

PROJECT_DIR = os.path.abspath(os.path.dirname(__file__))
REQUIREMENTS_FILE = os.path.join(PROJECT_DIR, "requirements.txt")
TARGET_DIR = "libs"
TARGET_DIR_PATH = os.path.join(PROJECT_DIR, "libs")


if __name__ == "__main__":
    #Make sure the user has everything they need
    for command in REQUIREMENTS:
        if not subprocess.check_output(["which", command]).strip():
            raise RuntimeError("You must install the '%s' command" % command)

    if not os.path.exists(TARGET_DIR_PATH):
        print('Creating `%s` directory for dependencies...' % TARGET_DIR)
        os.makedirs(TARGET_DIR_PATH)

    #Remove all folders and files, we leave symlinks as they will be pointing
    #to submodules
    filenames = (filename for filename in os.listdir(TARGET_DIR) if filename not in FILES_IGNORED_FOR_DELETION)
    for filename in filenames:
        path = os.path.join(TARGET_DIR, filename)
        if os.path.isdir(path) and not os.path.islink(path):
            shutil.rmtree(path)
        elif os.path.isfile(path):
            os.remove(path)

    print("Running pip...")
    args = ["pip", "install", "-r", REQUIREMENTS_FILE, "-t", TARGET_DIR, "-I"]
    p = subprocess.Popen(args)
    p.wait()

    # Now run syncdb...
    print("Running migrate...")
    args = ["python", "manage.py", "migrate"]
